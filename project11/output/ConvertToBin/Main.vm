function Main.main 1
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0
push constant 8000
call Memory.peek 1
pop local 0
push local 0
call Main.convert 1
pop temp 0
push constant 0
return
function Main.convert 3
push constant 0
not
pop local 2
label Main.WHILE.0
push local 2
not
if-goto Main.WHILE.1
push local 1
push constant 1
add
pop local 1
push local 0
call Main.nextMask 1
pop local 0
push local 1
push constant 16
gt
not
if-goto Main.IF.0
goto Main.IF.1
label Main.IF.0
push argument 0
push local 0
and
push constant 0
eq
not
if-goto Main.IF.3
goto Main.IF.4
label Main.IF.3
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
goto Main.IF.5
label Main.IF.4
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
label Main.IF.5
goto Main.IF.2
label Main.IF.1
push constant 0
pop local 2
label Main.IF.2
goto Main.WHILE.0
label Main.WHILE.1
push constant 0
return
function Main.nextMask 0
push argument 0
push constant 0
eq
if-goto Main.IF.6
goto Main.IF.7
label Main.IF.6
push constant 1
return
goto Main.IF.8
label Main.IF.7
push argument 0
push constant 2
call Math.multiply 2
return
label Main.IF.8
function Main.fillMemory 0
label Main.WHILE.2
push argument 1
push constant 0
gt
not
if-goto Main.WHILE.3
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
push argument 1
push constant 1
sub
pop argument 1
push argument 0
push constant 1
add
pop argument 0
goto Main.WHILE.2
label Main.WHILE.3
push constant 0
return
