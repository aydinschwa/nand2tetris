// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
                      
    DMux8Way (in=true, sel=address[3..5], a=zero, b=one, c=two, d=three, e=four, 
              f=five, g=six, h=seven);

    And (a=zero, b=load, out=zerol);
    And (a=one, b=load, out=onel);
    And (a=two, b=load, out=twol);
    And (a=three, b=load, out=threel);
    And (a=four, b=load, out=fourl);
    And (a=five, b=load, out=fivel);
    And (a=six, b=load, out=sixl);
    And (a=seven, b=load, out=sevenl);


    RAM8 (in=in, load=zerol, address=address[0..2], out=zeroout);
    RAM8 (in=in, load=onel, address=address[0..2], out=oneout);
    RAM8 (in=in, load=twol, address=address[0..2], out=twoout);
    RAM8 (in=in, load=threel, address=address[0..2], out=threeout);
    RAM8 (in=in, load=fourl, address=address[0..2], out=fourout);
    RAM8 (in=in, load=fivel, address=address[0..2], out=fiveout);
    RAM8 (in=in, load=sixl, address=address[0..2], out=sixout);
    RAM8 (in=in, load=sevenl, address=address[0..2], out=sevenout);

    Mux8Way16 (a=zeroout, b=oneout, c=twoout, d=threeout, e=fourout, 
               f=fiveout, g=sixout, h=sevenout, sel=address[3..5], out=out);

}
