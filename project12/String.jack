// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;
    field int neg;

    /** constructs a new empty string with a maximum len of maxlen
     *  and initial len of 0. */
    constructor String new(int maxlen) {
        let str = Array.new(maxlen);
        let len = 0;
        let neg = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current len of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[len] = "";
        let len = len -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var int d;
        var int negate;
        let val = 0;
        let i = 0;
        let negate = 1;
        while (i < len) {
            if (str[i] = 45) {
                let negate = -1; 
                let i = i + 1; 
            }
            else {
                let d = str[i] - 48;
                let val = (val * 10) + d;
                let i = i + 1;
            }
        }
        if (val > 32767) {let val = val - 32767 - 1;}
        let val = val * negate;
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var int c; 
        if (val < 0) {let val = (-val); let neg = -1;}
        let lastDigit = String.mod(val, 10);
        let c = lastDigit + 48;
        if (val < 10) {
            if (neg = -1) {
            let len = 0; 
            do appendChar(45); 
            let neg = 0;
            }
            else {let len = 0;}
            do appendChar(c); return;
        }
        else {
            do setInt(val/10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function int mod(int to_mod, int the_mod) {
      while (to_mod > (the_mod-1)) {
        let to_mod = (to_mod-the_mod);
        }
      return to_mod;
   }
}
