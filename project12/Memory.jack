// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory mem_blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = -1;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM mem_block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array current_seg, selected_seg, mem_block;
        var int current_segSize, selected_segSize;
        let current_seg = heap;
        let selected_seg = -1;
        let selected_segSize = heap[1] + 1;
        let current_segSize = current_seg[1];
        while(current_seg > -1){
            if(current_segSize > (size + 1)){
                if(current_segSize < selected_segSize){
                    let selected_seg = current_seg;
                    let selected_segSize = current_segSize;
                }
            }
            let current_seg = current_seg[0];
            let current_segSize = current_seg[1];
        }
        
        let selected_seg[1] = selected_seg[1] - size -2;
        let mem_block = selected_seg + selected_seg[1] + 1;
        let mem_block[0] = -1;
        let mem_block[1] = size;
        return mem_block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array current_seg, mem_block;
        let mem_block = o - 2;
        let current_seg = heap;
        while(current_seg[0] > 0){
            let current_seg = current_seg[0];
        }
        let current_seg[0] = mem_block;
        return;
    }
}





