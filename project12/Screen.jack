// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean draw;

    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;
        let draw = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    	var int count;
    	let count = 8000;
    	while (count > (-1)) {
    		do Memory.poke(16384+count, 0);
    		let count = count - 1;
    	}
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b = (-1)) {let draw = true;}
        else {let draw = false;}
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int i;
        let address = (32*y) + (x/16);
        let address = address + 16384;
        let value = Memory.peek(address);
        let i = Screen.mod(x, 16);
        if (draw = (-1)) {let value = value + twoToThe[i];}
        else {let value = value - twoToThe[i];}
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int diff;
        var int dx;
        var int dy;
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = Math.abs(x2-x1);
        let dy = Math.abs(y2-y1);

        // Vertical straight line
        if (dx = 0) {
            while (dy > (-1)){
                if (y2 > y1){
                do Screen.drawPixel(x1, y1+dy);
                let dy = dy - 1;
                }
                else {
                do Screen.drawPixel(x1, y1-dy);
                let dy = dy - 1;
                }
            }
            return;
        }

        // Horizontal straight line
        if (dy = 0) {
            while (dx > (-1)){
                if (x2 > x1){
                    do Screen.drawPixel(x1+dx, y1);
                    let dx = dx - 1;
                }
                else {
                do Screen.drawPixel(x1-dx, y1);
                let dx = dx - 1;
                }
            }
            return;
        }

        // General
        if ((x1 < x2) & (y1 < y2)) {
            while ((a < (dx+1)) & (b < (dy+1))) {
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                    do Screen.drawPixel(x1+a, y1+b);
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                    do Screen.drawPixel(x1+a, y1+b);
                }
            }
        }
        if ((x1 < x2) & (y1 > y2)) {
            while ((a < (dx+1)) & (b < (dy+1))) {
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                    do Screen.drawPixel(x1+a, y1-b);
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                    do Screen.drawPixel(x1+a, y1-b);
                }
            }
        }
        if ((x1 > x2) & (y1 < y2)) {
            while ((a < (dx+1)) & (b < (dy+1))) {
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                    do Screen.drawPixel(x1-a, y1+b);
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                    do Screen.drawPixel(x1-a, y1+b);
                }
            }
        }
        if ((x1 > x2) & (y1 > y2)) {
            while ((a < (dx+1)) & (b < (dy+1))) {
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                    do Screen.drawPixel(x1-a, y1-b);
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                    do Screen.drawPixel(x1-a, y1-b);
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int length;
        let length = Math.abs(y2-y1);
        while (length > (-1)) {
            do Screen.drawLine(x1, y1+length, x2, y1+length);
            let length = length-1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int rsq;
        var int border;
        let rsq = r*r;
        let dy = r;
        while (dy > (-r)){
            let border = Math.sqrt(rsq-(dy*dy));
            do Screen.drawLine(x-border, y-dy, x+border, y-dy);
            let dy = dy-1;
        }
        return;
    }

    function int mod(int to_mod, int the_mod) {
      while (to_mod > (the_mod-1)) {
        let to_mod = (to_mod-the_mod);
        }
      return to_mod;
   }
}
